<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d1/d2e/simple__json__list_8h" kind="file" language="C++">
    <compoundname>simple_json_list.h</compoundname>
    <includedby refid="d4/db4/simple__json__array_8c" local="yes">/home/djkehoe/git/simple_json/src/simple_json_array.c</includedby>
    <includedby refid="d4/dc8/simple__json__list_8c" local="yes">/home/djkehoe/git/simple_json/src/simple_json_list.c</includedby>
    <includedby refid="d1/d00/simple__json__object_8c" local="yes">/home/djkehoe/git/simple_json/src/simple_json_object.c</includedby>
    <includedby refid="d1/d15/simple__json_8h" local="yes">/home/djkehoe/git/simple_json/include/simple_json.h</includedby>
    <includedby refid="de/d40/simple__json__value_8h" local="yes">/home/djkehoe/git/simple_json/include/simple_json_value.h</includedby>
    <includedby refid="d0/d5f/simple__json__array_8h" local="yes">/home/djkehoe/git/simple_json/include/simple_json_array.h</includedby>
    <invincdepgraph>
      <node id="193">
        <label>/home/djkehoe/git/simple_json/src/simple_json_list.c</label>
        <link refid="d4/dc8/simple__json__list_8c"/>
      </node>
      <node id="200">
        <label>/home/djkehoe/git/simple_json/include/simple_json_array.h</label>
        <link refid="d0/d5f/simple__json__array_8h"/>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="197">
        <label>/home/djkehoe/git/simple_json/src/simple_json_parse.c</label>
        <link refid="d1/d6a/simple__json__parse_8c"/>
      </node>
      <node id="199">
        <label>/home/djkehoe/git/simple_json/include/simple_json_value.h</label>
        <link refid="de/d40/simple__json__value_8h"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>/home/djkehoe/git/simple_json/src/simple_json.c</label>
        <link refid="df/d03/simple__json_8c"/>
      </node>
      <node id="192">
        <label>/home/djkehoe/git/simple_json/src/simple_json_array.c</label>
        <link refid="d4/db4/simple__json__array_8c"/>
      </node>
      <node id="194">
        <label>/home/djkehoe/git/simple_json/src/simple_json_object.c</label>
        <link refid="d1/d00/simple__json__object_8c"/>
      </node>
      <node id="191">
        <label>/home/djkehoe/git/simple_json/include/simple_json_list.h</label>
        <link refid="simple_json_list.h"/>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>/home/djkehoe/git/simple_json/include/simple_json_object.h</label>
        <link refid="dd/d32/simple__json__object_8h"/>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="195">
        <label>/home/djkehoe/git/simple_json/include/simple_json.h</label>
        <link refid="d1/d15/simple__json_8h"/>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
      </node>
      <node id="198">
        <label>/home/djkehoe/git/simple_json/src/simple_json_string.c</label>
        <link refid="d9/dc8/simple__json__string_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d0/d8b/structSJListElementData" prot="public">SJListElementData</innerclass>
    <innerclass refid="d9/d7e/structSJList" prot="public">SJList</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a78de0f56ef6afe7c22f0ebd4933607de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_new</definition>
        <argsstring>()</argsstring>
        <name>sj_list_new</name>
        <briefdescription>
<para>create a new list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>NULL on memory error or an initialized list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="27" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a34c6cbe1af545d7cfd0c30e98e99e8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_new_size</definition>
        <argsstring>(unsigned int count)</argsstring>
        <name>sj_list_new_size</name>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>allocate a new empty list of size &apos;count&apos; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>how many elements you wish to support in this list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on memory error or a new empty list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="34" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="22" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a4498df009cb743e4161f4b5a3fe3e7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sj_list_delete</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_delete</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>deletes a list that has been previously allocated </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to delete; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="40" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="7" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a38cb6cd4286019d518ab87691e2693bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sj_list_get_nth</definition>
        <argsstring>(SJList *list, unsigned int n)</argsstring>
        <name>sj_list_get_nth</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>get the data stored at the nth element </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to pull data from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>which element to look out </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on error (such as if n &gt; the element count) or the address of the data otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="48" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a45a595f33a0cf30ff2e205a3571c7507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sj_list_append</definition>
        <argsstring>(SJList *list, void *data)</argsstring>
        <name>sj_list_append</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>add an element to the end of the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to add to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to assign to the new element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="55" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="83" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a5df14d77a6ed3ff7c461176d900f168e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_insert</definition>
        <argsstring>(SJList *list, void *data, unsigned int n)</argsstring>
        <name>sj_list_insert</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>instert a new element at the position provided </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to insert into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to assin to the new element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the address of the list. In the event that the list needed to expand this will be different from the list provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="63" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="109" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1ae208fdf2ebaee60fd437d305f5e3ebbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_delete_nth</definition>
        <argsstring>(SJList *list, unsigned int n)</argsstring>
        <name>sj_list_delete_nth</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>delete the element at the nth position in the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to delete out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to delete. This is no-op if the nth element is beyond the scope of the list (event is logged) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the list provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="71" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="170" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a2ef30e013f6c4986c2d66157be901001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sj_list_delete_data</definition>
        <argsstring>(SJList *list, void *data)</argsstring>
        <name>sj_list_delete_data</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>delete the first element in the list pointing to the address of data </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>does not delete the data itself </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to delete the element from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>used to match against which element to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on complete, error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="80" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="148" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="d1/d2e/simple__json__list_8h_1a20c3361477b5a57bd46579d961277c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int sj_list_get_count</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_get_count</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>get the number of tracked elements in the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list the check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the count in the list. Will be zero if list was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h" line="87" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="192" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__SIMPLE_JSON_LIST_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SIMPLE_JSON_LIST_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="d0/d8b/structSJListElementData" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9" refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" kindref="member">data</ref>;<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal">}<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="d9/d7e/structSJList" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18" refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref><sp/>*<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="19" refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20" refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d1/d2e/simple__json__list_8h_1a78de0f56ef6afe7c22f0ebd4933607de" kindref="member">sj_list_new</ref>();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d1/d2e/simple__json__list_8h_1a34c6cbe1af545d7cfd0c30e98e99e8ae" kindref="member">sj_list_new_size</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d2e/simple__json__list_8h_1a4498df009cb743e4161f4b5a3fe3e7d8" kindref="member">sj_list_delete</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d1/d2e/simple__json__list_8h_1a38cb6cd4286019d518ab87691e2693bc" kindref="member">sj_list_get_nth</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d2e/simple__json__list_8h_1a45a595f33a0cf30ff2e205a3571c7507" kindref="member">sj_list_append</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d1/d2e/simple__json__list_8h_1a5df14d77a6ed3ff7c461176d900f168e" kindref="member">sj_list_insert</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d1/d2e/simple__json__list_8h_1ae208fdf2ebaee60fd437d305f5e3ebbf" kindref="member">sj_list_delete_nth</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d2e/simple__json__list_8h_1a2ef30e013f6c4986c2d66157be901001" kindref="member">sj_list_delete_data</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d2e/simple__json__list_8h_1a20c3361477b5a57bd46579d961277c23" kindref="member">sj_list_get_count</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/djkehoe/git/simple_json/include/simple_json_list.h"/>
  </compounddef>
</doxygen>
