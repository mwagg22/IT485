<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d4/dc8/simple__json__list_8c" kind="file" language="C++">
    <compoundname>simple_json_list.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="d1/d2e/simple__json__list_8h" local="yes">simple_json_list.h</includes>
    <includes refid="d6/d6f/simple__json__error_8h" local="yes">simple_json_error.h</includes>
    <incdepgraph>
      <node id="269">
        <label>/home/djkehoe/git/simple_json/src/simple_json_list.c</label>
        <link refid="simple_json_list.c"/>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="272">
        <label>stdlib.h</label>
      </node>
      <node id="271">
        <label>string.h</label>
      </node>
      <node id="274">
        <label>simple_json_error.h</label>
        <link refid="d6/d6f/simple__json__error_8h"/>
      </node>
      <node id="273">
        <label>simple_json_list.h</label>
        <link refid="d1/d2e/simple__json__list_8h"/>
      </node>
      <node id="270">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a4498df009cb743e4161f4b5a3fe3e7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sj_list_delete</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_delete</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>deletes a list that has been previously allocated </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to delete; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="7" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="7" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a78de0f56ef6afe7c22f0ebd4933607de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_new</definition>
        <argsstring>()</argsstring>
        <name>sj_list_new</name>
        <briefdescription>
<para>create a new list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>NULL on memory error or an initialized list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="17" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a34c6cbe1af545d7cfd0c30e98e99e8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_new_size</definition>
        <argsstring>(unsigned int count)</argsstring>
        <name>sj_list_new_size</name>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>allocate a new empty list of size &apos;count&apos; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>how many elements you wish to support in this list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on memory error or a new empty list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="22" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="22" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a38cb6cd4286019d518ab87691e2693bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sj_list_get_nth</definition>
        <argsstring>(SJList *list, unsigned int n)</argsstring>
        <name>sj_list_get_nth</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>get the data stored at the nth element </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to pull data from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>which element to look out </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on error (such as if n &gt; the element count) or the address of the data otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="49" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a3a75e39da2d6908d5e1ac77504d37524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_expand</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_expand</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="60" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="60" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a45a595f33a0cf30ff2e205a3571c7507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sj_list_append</definition>
        <argsstring>(SJList *list, void *data)</argsstring>
        <name>sj_list_append</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>add an element to the end of the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to add to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to assign to the new element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="83" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="83" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a168903c2134f06073b0a7e59f1e2dd67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_prepend</definition>
        <argsstring>(SJList *list, void *data)</argsstring>
        <name>sj_list_prepend</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="104" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a5df14d77a6ed3ff7c461176d900f168e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_insert</definition>
        <argsstring>(SJList *list, void *data, unsigned int n)</argsstring>
        <name>sj_list_insert</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>instert a new element at the position provided </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to insert into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to assin to the new element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the address of the list. In the event that the list needed to expand this will be different from the list provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="109" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="109" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a31540e4441f700dbd6409d567c55ec98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_delete_first</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_delete_first</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="133" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a5117df142c99572867f79ede5a457835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_delete_last</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_delete_last</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="138" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a2ef30e013f6c4986c2d66157be901001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sj_list_delete_data</definition>
        <argsstring>(SJList *list, void *data)</argsstring>
        <name>sj_list_delete_data</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>delete the first element in the list pointing to the address of data </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>does not delete the data itself </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to delete the element from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>used to match against which element to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on complete, error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="148" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="148" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1ae208fdf2ebaee60fd437d305f5e3ebbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
        <definition>SJList* sj_list_delete_nth</definition>
        <argsstring>(SJList *list, unsigned int n)</argsstring>
        <name>sj_list_delete_nth</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>delete the element at the nth position in the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to delete out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to delete. This is no-op if the nth element is beyond the scope of the list (event is logged) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the list provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="170" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="170" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a20c3361477b5a57bd46579d961277c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int sj_list_get_count</definition>
        <argsstring>(SJList *list)</argsstring>
        <name>sj_list_get_count</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>get the number of tracked elements in the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list the check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the count in the list. Will be zero if list was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="192" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc8/simple__json__list_8c_1a01ebe1a232a431157e23a5bac1fe222a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sj_list_foreach</definition>
        <argsstring>(SJList *list, void(*function)(void *data, void *context), void *contextData)</argsstring>
        <name>sj_list_foreach</name>
        <param>
          <type><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void(*)(void *data, void *context)</type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>contextData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c" line="198" column="1" bodyfile="/home/djkehoe/git/simple_json/src/simple_json_list.c" bodystart="198" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d2e/simple__json__list_8h" kindref="compound">simple_json_list.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/d6f/simple__json__error_8h" kindref="compound">simple_json_error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="d1/d2e/simple__json__list_8h_1a4498df009cb743e4161f4b5a3fe3e7d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a4498df009cb743e4161f4b5a3fe3e7d8" kindref="member">sj_list_delete</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>free(list);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d1/d2e/simple__json__list_8h_1a78de0f56ef6afe7c22f0ebd4933607de" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a78de0f56ef6afe7c22f0ebd4933607de" kindref="member">sj_list_new</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a34c6cbe1af545d7cfd0c30e98e99e8ae" kindref="member">sj_list_new_size</ref>(16);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="d1/d2e/simple__json__list_8h_1a34c6cbe1af545d7cfd0c30e98e99e8ae" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a34c6cbe1af545d7cfd0c30e98e99e8ae" kindref="member">sj_list_new_size</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*l;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!count)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;cannot<sp/>make<sp/>a<sp/>list<sp/>of<sp/>size<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref>));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!l)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>allocate<sp/>space<sp/>for<sp/>the<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(l,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref>));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref><sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref><sp/>=<sp/>(<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>)*count);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!l-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>allocate<sp/>space<sp/>for<sp/>list<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(l);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(l-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>)*count);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="d1/d2e/simple__json__list_8h_1a38cb6cd4286019d518ab87691e2693bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a38cb6cd4286019d518ab87691e2693bc" kindref="member">sj_list_get_nth</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>&gt;=<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>)||(n<sp/>&gt;=<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref>))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[n].<ref refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="d4/dc8/simple__json__list_8c_1a3a75e39da2d6908d5e1ac77504d37524" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a3a75e39da2d6908d5e1ac77504d37524" kindref="member">sj_list_expand</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*l;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref>)list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/><ref refid="d4/dc8/simple__json__list_8c_1a34c6cbe1af545d7cfd0c30e98e99e8ae" kindref="member">sj_list_new_size</ref>(list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref><sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!l)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(l-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>,list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>)*list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>=<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dc8/simple__json__list_8c_1a4498df009cb743e4161f4b5a3fe3e7d8" kindref="member">sj_list_delete</ref>(list);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="d1/d2e/simple__json__list_8h_1a45a595f33a0cf30ff2e205a3571c7507" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a45a595f33a0cf30ff2e205a3571c7507" kindref="member">sj_list_append</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>&gt;=<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="d4/dc8/simple__json__list_8c_1a3a75e39da2d6908d5e1ac77504d37524" kindref="member">sj_list_expand</ref>(list);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;append<sp/>failed<sp/>due<sp/>to<sp/>lack<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;append<sp/>failed<sp/>due<sp/>to<sp/>lack<sp/>of<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>++].<ref refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="d4/dc8/simple__json__list_8c_1a168903c2134f06073b0a7e59f1e2dd67" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a168903c2134f06073b0a7e59f1e2dd67" kindref="member">sj_list_prepend</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a5df14d77a6ed3ff7c461176d900f168e" kindref="member">sj_list_insert</ref>(list,data,0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="d1/d2e/simple__json__list_8h_1a5df14d77a6ed3ff7c461176d900f168e" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a5df14d77a6ed3ff7c461176d900f168e" kindref="member">sj_list_insert</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref><sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;attempting<sp/>to<sp/>insert<sp/>element<sp/>beyond<sp/>length<sp/>of<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>&gt;=<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a1e3944d88b5e2aac09698498f376559b" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="d4/dc8/simple__json__list_8c_1a3a75e39da2d6908d5e1ac77504d37524" kindref="member">sj_list_expand</ref>(list);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[n+1],&amp;list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[n],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>)*(list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>-<sp/>n));</highlight><highlight class="comment">//copy<sp/>all<sp/>elements<sp/>after<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[n].<ref refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="d4/dc8/simple__json__list_8c_1a31540e4441f700dbd6409d567c55ec98" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a31540e4441f700dbd6409d567c55ec98" kindref="member">sj_list_delete_first</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1ae208fdf2ebaee60fd437d305f5e3ebbf" kindref="member">sj_list_delete_nth</ref>(list,0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="d4/dc8/simple__json__list_8c_1a5117df142c99572867f79ede5a457835" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1a5117df142c99572867f79ede5a457835" kindref="member">sj_list_delete_last</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1ae208fdf2ebaee60fd437d305f5e3ebbf" kindref="member">sj_list_delete_nth</ref>(list,list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>-1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="d1/d2e/simple__json__list_8h_1a2ef30e013f6c4986c2d66157be901001" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a2ef30e013f6c4986c2d66157be901001" kindref="member">sj_list_delete_data</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>;i++)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[i].<ref refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" kindref="member">data</ref><sp/>==<sp/>data)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>it,<sp/>now<sp/>delete<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dc8/simple__json__list_8c_1ae208fdf2ebaee60fd437d305f5e3ebbf" kindref="member">sj_list_delete_nth</ref>(list,i);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;data<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="d1/d2e/simple__json__list_8h_1ae208fdf2ebaee60fd437d305f5e3ebbf" refkind="member"><highlight class="normal"><ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*<ref refid="d4/dc8/simple__json__list_8c_1ae208fdf2ebaee60fd437d305f5e3ebbf" kindref="member">sj_list_delete_nth</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;attempting<sp/>to<sp/>delete<sp/>beyond<sp/>the<sp/>length<sp/>of<sp/>the<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>(list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>--;</highlight><highlight class="comment">//<sp/>last<sp/>element<sp/>in<sp/>the<sp/>list,<sp/>this<sp/>is<sp/>easy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[n],&amp;list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[n+1],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d0/d8b/structSJListElementData" kindref="compound">SJListElementData</ref>)*(list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref><sp/>-<sp/>n));</highlight><highlight class="comment">//copy<sp/>all<sp/>elements<sp/>after<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>--;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="d1/d2e/simple__json__list_8h_1a20c3361477b5a57bd46579d961277c23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a20c3361477b5a57bd46579d961277c23" kindref="member">sj_list_get_count</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="d4/dc8/simple__json__list_8c_1a01ebe1a232a431157e23a5bac1fe222a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/dc8/simple__json__list_8c_1a01ebe1a232a431157e23a5bac1fe222a" kindref="member">sj_list_foreach</ref>(<ref refid="d9/d7e/structSJList" kindref="compound">SJList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">function</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context),</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*contextData)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>list<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">function</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d02/simple__json__error_8c_1ae0819d6f58f423e5d26ea66df15de81c" kindref="member">sj_set_error</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>function<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;i<sp/>&lt;<sp/>list-&gt;<ref refid="d9/d7e/structSJList_1a706017d74f3cde16157127d8e8025116" kindref="member">count</ref>;i++)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(list-&gt;<ref refid="d9/d7e/structSJList_1a43fc72ebe9774607d3c503917b911c7c" kindref="member">elements</ref>[i].<ref refid="d0/d8b/structSJListElementData_1ae48c7175a4477eb042b02b70c88485d1" kindref="member">data</ref>,contextData);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*eol@eof*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/djkehoe/git/simple_json/src/simple_json_list.c"/>
  </compounddef>
</doxygen>
